github repo: https://github.com/atk0dev/cheat-sheet.git


git init
# create new git repo

git status
# state of git

git add file_name.txt
# add file to git so it can track file changes
# pass file name or folder name (all files in folder wil be added to tracking area)

git add .
# add all untracked files to gitrepo
# adds exact content of the file at that time to the staging area

git diff
# changes in files

git diff --staged
# diff in staged but not yet committed files

git commit
# commit staged files

git commit -v
# detailed output about what is going to be committed (it takes output form git diff)

git commit -m "Commit description here"
# commit with message

git commit -a
# add and commit

git log
# show history

git log -2
# display 2 latest log entries

git log -p
# display patch made in each commit (it is similar to: git diff)

git log --pretty=oneline
# show log with one line per commit (oneline, full, fuller)

git log --since "2 months"
# show log since 2 month ago (d key goes down over pages, u - scroll up)

git log --graph
# show commits in graph format

git commit --amend
# open prev commit message and updates prev commit (join prev commit with current one)

git revert id_of_commit (from git log)
# revert commit (creates new commit with reverting orriginal one)

git clone https://github.com/atk0dev/cheat-sheet.git
# clone remote repo into cheat-sheet folder

git remote
# show remotes of the repo

git remote add new-remote http://new-remote.com
# add new remote to current repo


git remote add origin https://github.com/atk0dev/cheat-sheet.git
git push -u origin master
#add remote and push (from github)


git fetch origin
# get remote repository (does not merge)

git merge origin/master master
# updated local master branch with commits from remote master branch

git push origin master
# push local master branch to origin remote

git remote show origin
# show detailed information about remotes (url, branch)

git pull
# this is an aliss for 2 commands: git fetch + git merge origin/master master

git tag 
# list all tags in the repo in a-z order

git tag --list pattern
# search over tags

git tag -a "1.1" -m "This is my annotated tag"
# create annotated tag (tag with message)

git show "1.1"
# show tag

git push origin --tags
# push tags to origin


git branch new-branch-name
# create new branch (but not move head pinter to it)

git checkout new-branch-name
# checkout branch (move head pinter to it)


git branch
# show all branches and show current branch

git checkout -b feature-branch
# crete feature branch if it does not exist and check it out


git merge feature-branch
# merge feature-branch into current branch

git branch -d feature-branch
# remove feature branch

git push origin feature-branch
# push branch to remote

git checkout origin remote-branch
# checkout remote branch

git remote -v show
# show remote repos with urls


git reset --soft HEAD~5
# reset all committed changes and move them to uncommitted state
# i have 5 commits and i can remove it from commit and set latest version of code unstaged 
# --soft keeps all changes in working copy
# branch should be unmerged

git diff
# shows changes

git diff --staged
# shows diff between current working copy and committed files

git commit -v
# committing changes and see all changes done in commit

git push origin branch-name
# push local branch to remote